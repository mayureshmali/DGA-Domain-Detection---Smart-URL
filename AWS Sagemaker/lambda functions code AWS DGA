//Billing Lambda

import json
import boto3
from datetime import datetime,timedelta
def get_billing(api_key = None):
    start_date = (datetime.now() - timedelta(days = 7.0)).strftime('%Y-%m-%d')
    end_date = datetime.now().strftime('%Y-%m-%d')
    
    client = boto3.client('apigateway')
    response = client.get_api_keys(
        includeValues = True)
    api_keys = list()
    if 'items' in response:
        for item in response['items']:
            api_keys.append(item)
            
        for api_key in api_keys:
            response = client.get_usage_plans(
                keyId = api_key['id'],
                limit = 100)
            for _item in response['items']:
                api_key['planid'] = _item['id']
                
        for api_key in api_keys:
            if api_key['value'] == api_key:
                usage = client.response = client.get_usage(
                    key_Id = api_key['id'],
                    usagePlanId = api_key['planid'],
                    startDate = start_date,
                    endDate = end_date,
                    limit = 100
                    )
                _items = usage['items']
                if len(_item) == 0:
                    return 0
                count = 0
                for key in _items:
                    for used,quota in _items[key]:
                        count += used
                return count
    return int(0)
    
def lambda_handler(event, context):
    """Pulls billing info from API Gateway"""


    if 'queryStringParameters' not in event:
        return {
            'statusCode': 227,
            'body': json.dumps(event)
        }
    else:
        query_parms = event['queryStringParameters']
        count = get_billing(apikey=query_parms['api_key'])
        rvalue = {"api_key": query_parms['api_key'], "count": count}
        return {
            'statusCode': 200,
            'body': json.dumps(rvalue)
        }
                
                
        
        
        
// Predict Lambda
import json
import random
import logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)
import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
import tldextract
import boto3
import re
import math
from itertools import groupby
import math
from collections import Counter
import itertools as it
import collections

class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, decimal.Decimal):
            if o % 1 > 0:
                return float(o)
            else:
                return int(o)
        return super(DecimalEncoder, self).default(o)

        
def domain_extract(uri):
    ext = tldextract.extract(uri)
    if (not ext.suffix):
        return np.nan
    else:
        return ext.domain
        
def entropy(s):
    p, lns = Counter(s), float(len(s))
    return -sum( count/lns * math.log(count/lns, 2) for count in p.values())
    
def calc_vowels(y):
    num_vowel = 0
    vowels = list('aeiou')
    for char in y:
        if char in vowels:
            num_vowel += 1

    return num_vowel
    
def calc_digits(z):
    num_digit = 0
    digits = list('0123456789')
    for char in z:
        if char in digits:
            num_digit += 1

    return num_digit
    
def consecutive_consonants(string):
    from itertools import groupby
    is_vowel = lambda char: char in "aAeEiIoOuU"
    best = 0
    listnames = ["".join(g) for v, g in groupby(string, key=is_vowel) if not v]
    for index in range(len(listnames)):
        if len(listnames[index]) > best:
            best = len(listnames[index])
    return best

##Encoding the characters:
char_map = {chr(i+97): i+1 for i in range(26)} ##For all the alphabets
char_map['.'] = 27
char_map['_'] = 28
char_map['-'] = 29
char_map['\n'] = 41
count = 30
##For all the digits
for i in range(10):
    char_map[str(i)] = count
    count+=1
##Padding to keep the vectors of same length
char_map[' '] = 40
max_length = 64 ##length of our embedding

##Creates encoded vector 
def encodeDomain(domain, max_length):
    vector = np.full(shape= max_length, fill_value=0)
    for i in range(len(domain)):
        if domain[i] not in char_map:
            print('Invalid key ', domain[i])
        else:
            vector[i] = char_map[domain[i]]
    v=vector.tolist()
#    print(vector)
    return v

    
def test_it(domain):
    
    _X = [encodeDomain(domain,64),len(domain), entropy(domain), calc_vowels(domain), calc_digits(domain), consecutive_consonants(domain)]  
    
    
    #return _X
    return flatten(_X)

#  if isinstance(_X, collections.Iterable):
#          return [a for i in _X for a in flatten(i)]
#     else:
#          return [x]
        
def flatten(x):
    if isinstance(x, collections.Iterable):
        return [a for i in x for a in flatten(i)]
    else:
        return [x]
    
def predict_one_dga_value(sm_client, features, endpoint_name):
    
    # print('Using model endpoint {} to predict dga for this feature vector: {}'.format(endpoint_name, features))

    body = features   # error is to_csv is not defined
    
    #start_time = time.time()

    response = sm_client.invoke_endpoint(
        
        EndpointName=endpoint_name,
        ContentType='text/csv',
        Accept='*/*',
        Body=body)
        
    predicted_prob = json.loads(response['Body'].read())
    return predicted_prob, predicted_prob >= 0.5

        
def lambda_handler(event, context):
    runtime_sm_client = boto3.client(service_name='sagemaker-runtime')
    print(event)
    
    if 'fqdn' not in event:
        return {
            'statusCode': 227,
            'body': json.dumps('MISSING queryStringParameters')
        }
    else:
        query_parms = event['fqdn']
        #return query_parms
        logger.info(msg=query_parms)
        
        test_data = query_parms
        
        abc = domain_extract(test_data)
        #return abc
        
        features = test_it(abc)
        #return features
        request_body = ','.join([str(x) for x in features])
        #return request_body
 
        predicted_prob, pred_val = predict_one_dga_value(sm_client=runtime_sm_client, features=request_body, endpoint_name='IMT-570')  #xgboost-2020-05-19-11-23-00-152
 
        logger.info(msg=query_parms)
        return {
            'fqdn': str(query_parms),
            'dga': pred_val
        }


//Test
exports.handler = async (event) => {
    // TODO implement
    const response = {
        statusCode: 200,
        body: JSON.stringify('Hello from Lambda!'),
    };
    return response;
};

//API Keys
import json
import boto3

def lambda_handler(event, context):
    # TODO implement
    
    _client = boto3.client('apigateway')
    _response = _client.get_api_keys(
        includeValues = True
    )
    _api_keys = list()
    if 'items' in _response:
        for _item in _response['items']:
            _api_keys.append(_item['value'])
            return {
                'statusCode':200,
                'body':json.dumps(_api_keys)
            }
    else:
        return {
            'statusCode':227,
            'body':json.dumps(event)
        }
    

//hello-sagemaker-invoke

import json
import boto3


def lambda_handler(event, context):
    
    client = boto3.client('sagemaker-runtime')
    endpoint_name = 'xgboost-2020-05-14-22-36-11-971'
    
    response = client.invoke_endpoint(
        EndpointName=endpoint_name, 
        CustomAttributes='Hello Sagemaker, this is your friend lambda', 
        ContentType='text/csv',
        Accept='*/*',
        Body='12,3.2516291673878226,3,0,3'    
    )
    
    print(response)
    print(response['Body'].read().decode('utf-8'))
    
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }



